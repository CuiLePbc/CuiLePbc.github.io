---
layout: post
title:  "初衷"
date:   2019-03-29 15:03:00 +0800
categories: start
---
> 开始的开始吧，先作一个自我总结。相当于一个自己的库存盘点吧，哈哈！

## 基础知识储备

### 语言基础
- **Java-**
算是使用最久也最熟悉的语言了吧。从开始的在学校学习JSP网站建设，实习期在外包公司做网站后台，再到工作中SWT桌面软件，最后自学了使用Java语言的Android应用开发，并且成功找到了Android开发的岗位，经过了两款APP的开发。到如今，又在工作之余研究了JavaFX的开发等等。虽然不能说学习有多深入，但是基础知识熟练度绝对不差了。
- **kotlin-**
目前最喜欢的编程语言。开始，因为Android官方宣布使用kotlin作为第一支持语言，作为一名Android开发者（自封），当然要紧跟Google的步伐咯。于16年接触学习了这门据说是现代版的java语言。结果一发不可收拾，语言的简洁性、一些方便的语法糖（好吧，我承认就是觉得可以少敲代码或者cool）、和java的高度兼容性等特点让我一下子喜新厌旧了。使用kotlin开发出了几款Android应用Demo玩了玩，然后又使用KotlinFX、TornadoFX等做了一些桌面小工具。目前乐此不疲使用中。但是没有专门学习过Kotlin语言，都是在用Java思路开发Kotlin应用。而且属于用到了才去查API，其实Kotlin语言基础还是比较薄弱的。
- **Android-**
假设Android算是一门语言吧。开始的适合，学习了四大组件开发、UI简单设计等方面知识，就自信满满，还真让我蒙着了一家小公司，成为了一名Android开发（公司唯一的一个），然后使用了浑身解数、历时两个月，先后为公司做出了公司网站配套的信息查询APP、对图像中的物体数量自动计数App（和公司C开发合作完成的，核心数数代码是他完成，我只是做了APP中图像处理、JNI调用等工作）。然后由于各方面原因，离职到了现在所在事业单位，每天修电脑为生！工作之余，先后研究了MVP架构、各种流行的第三方库（比如Rxjava、Dragger2、Retrofit、Glide、zxing、Butterknife等等）、Material设计规范等，但是这些均是处于能够基础使用，并未深入理解其设计理念、高级使用（给自己找的借口是，没有实际生产环境，没有那么复杂的业务需求）。后来在玩demo过程中，发现自己对于基础知识、底层知识还是比较薄弱，然后又根据一些教程，仔细研究了View绘制、自定义View等，也了解过Android系统底层架构、App启动原理、Android开发中Style、Theme等的基础使用等。后来又跟随Google发布的Android的一些新组件，比如Jetpack组件中的Navigation（用的最多）、Room、AndroidKTX（官方文档缺乏，只试过几个功能点）等等。Android语言来说的话，目前我的状态是所学碎片化严重，并且都是浅尝即止，缺乏深度和系统性。
- **SWT/JavaFX/KotlinFX/TornadoFX-**
这三者归为一类把，都属于桌面应用开发范畴，感觉上，JavaFX以及其衍生品KotlinFX、TornadoFX均是较为现代化一些，完全跨平台，不需要过多额外处理，便可兼容Windows和Linux系统。而SWT则需要配置不同的开发环境。对他们的使用来说，对官方提供的控件以及样式设计等均问题不大。只是由于前端能力几乎不存在，导致JavaFX系的使用CSS定义控件样式等能力使用十分生疏。而且对于开发复杂的大中型的应用驾驭能力严重不足，当功能复杂时，明显对于代码组织、可读性等就会下台阶。（基础知识、架构方面、设计模式方面、经验方面等问题）所以对于这些桌面应用开发，处于基础还行，但是正式生产环境又有所欠缺程度。
- **SQL-**
数据库方面的话，由于常年移动端相关，使用均为Sqlite数据库，所以结构较为简单。而且也未深入学习过，仅限于数据库的增删查改、创建删除、简单的主外键设置、内联查询等功能使用。只能说有基础，而已。
- **UML-**
十分薄弱来总结吧，是勉强能看懂类图等的程度，自己很少使用。
- **英语-**
也算比较重要的编程相关技能，CET-4之后，停滞不前，目前就是三千来词汇量，靠着词典看英文文章而已。

### 其他基础
- **算法、数据结构-**
均是学校为考试而学的水平，最近由于一些原因，大概又翻了翻。数据结构也就是了解了线性表、简单的树相关概念以及简单使用案例。对于图仅仅是了解。算法方面，也就是学会了一些简单的搜索、排序等方法，对于递归、动态规划、贪心等算法只是直到概念，使用十分生涩。
- **设计模式-**
知道基本原则，知道并且用过单例、观察者（用得最多，不一定标准）、工厂、适配器等（一下子就想到这几样）。但还远远未达到一切均在掌控中的程度，比如上面说的复杂应用驾驭能力直线下降。
- **架构-**
单出来提一下，因为图形界面的应用比较重要。对于MVC、MVP均多次使用，虽然不一定能够标准使用，但是有意识地多次规范过自己应用结构。MVVM架构方式了解概念，并未使用过。

### 结语
Android发展速度还是比较快的，官方的版本更新速度以及版本变化都让我这业余爱好者忙于追赶了。但是，应该是因为自己都是在以兴趣爱好为基础，业余学习着Android知识来当娱乐吧（其实是对自己要求低、懒惰等因素），所以对于App的完成度、质量等一系列都处于一个基本没有要求的状态，所以烂尾App一大把，没有一款自己满意的。基本到了开发不下去的难点，就会找各方面原因，而没有坚持攻克难点，反而不断在起步阶段徘徊。而且随着时间推移，基础知识诸如算法、数据结构、设计模式、数据库等一系列东西越来越陌生（因为从来不用）。感觉开了无数个头，但是均未走下去。反而头开的越来越不好。所以自己学习状态、时间规划、路线规划均是十分混乱，而且能力确实欠缺，自我约束力又严重不足。所以，决定以此处为记录，逐渐提高自己，督促自己进步。
### 后继
总结完了，总得给自己一个目标了。笼统的一年规划吧：
1. 基础方面，由于工作原因，需要进行一个软考中级。刚好，选择了软件设计师方向。以此来给自己一个基础弥补的参照吧。努力学习，对于算法、数据结构、数据库、操作系统、设计模式等等方面，进行一个较为全面的复习。起码靠自己半年的学习，用自己的掌握知识通过这个考试吧。
2. Android开发方面，有几个设想：
- Jetpack框架学习完毕，并且完全使用新框架的各方面内容，做出一款成熟度较高的APP。（官方推荐，未来趋势，有必要学习，而且很多可以代替常用三方库）
- 常用的三方库巩固练习，并且一定了解其思路原理。（一直浅尝，有必要学习一下）
- 对于Android自动化测试方面，由于一直未使用过，但是随着学习进行，感觉有必要进行简单学习，能够自己测试自己的代码。（短板，APP质量的保证）
- Flutter语言初尝试，做出一款成熟度较高的APP。（跨平台的诱惑，但是优先级排最后，因为自己开的头已经够多，原生开发先扎实了再到这一步。）
3. 语言方面：继续巩固Kotlin，尤其对于Kotlin的一些高级特性（扩展能力、Lambda表达式、协程等）加强练习学习。
- 继续巩固Kotlin，尤其对于Kotlin的一些高级特性（扩展能力、Lambda表达式、协程等）加强练习学习。
- 数据库方面，找到了一本不错的MySql的书，仔细学习。
- UML、英语，这两者都是辅助性能力，随着软件设计师学习，会使用UML，给自己的APP或者应用提前设计。英语重要性不必多说，有意识多看英文文档，多听多说。

4. 工作方面：工作常用EXCEL工具（不要笑话），本来想来一个MOS大师级证书的，不过由于有点贵，放弃了。但是多用多想多学这方面能力，有必要有精力可以稍微研究一下VBA（四处乱开头的毛病）。

总的来说吧，自己的最大毛病：一是自控、坚持、自我规划能力不足。二是疑似有为了学习而学习，经常看见一个有趣的知识点、或者技能，就不断去学习，但是遇到挫折，就会放弃转而去学习下一个；感觉自己在用学习来不断麻痹自己。毕竟所有的能力均是学来使用的，要使用，必须有较透彻的深度。所以，现下重点就是不断巩固自己已有的能力。
> 以后每篇学习记录、技术分享相关的文章，均会备注主题，定期查看自己各个方面的进度吧。希望明天的自己会更好。

### 以上！
