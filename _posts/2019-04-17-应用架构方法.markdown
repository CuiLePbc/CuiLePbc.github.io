---
layout: post
title:  "应用架构方法"
date:   2019-04-18 12:30:00 +0800
categories: Android,架构
---


## Android应用结构
### 移动应用用户体验
桌面应用一般将桌面或程序启动器当作单个入口点，然后作为单个整体流程运行。但是Android应用不同，它应包含多个[应用组件](https://developer.android.com/guide/components/fundamentals.html#Components)（Activity、Fragment、Service、内容提供程序、广播接收器。
一般在[应用清单](https://developer.android.com/guide/topics/manifest/manifest-intro.html) 中声明上述大多数组件。鉴于应用使用过程中，其中的组件会和其他应用的某些组件互相交互，而且移动设备资源有限，操作系统随时可能终止某些应用进程以便为新的进程腾出空间。应用组件应该可以不按顺序地单独启动，用户和操作系统可以随时销毁它们。所以 **不应该在应用组件中存储任何应用数据或状态**，并且应用组件不应相互依赖。

### 常见架构原则
#### 分离关注点
最重要的原则，最常见的错误是在一个Activity或Fragment中编写所有代码。这些基于界面的类应该只包含处理界面和操作系统交互的逻辑。这样可以避免很多关于生命周期的问题。
注意：应用开发中，我们并不拥有Activity或Fragment的实现，其真实拥有着依旧是操作系统，操作系统会随时根据需要销毁它们。所以要减少对它们的依赖。
#### 通过模型驱动界面
应该通过模型驱动界面，最好是持久性模型。模型用于处理应用数据，独立于应用组件和View，因此不受应用生命周期及相关关注点的影响。
之所以最好是持久性，因为：

- 如果应用被销毁，用户不会丢失数据。
- 当网络连接不稳定或不可用，应用会继续工作。

应用所基于的模型类应明确定义数据管理职责，这样将使应用更可测试且更一致。

### 推荐应用架构
本部分是官方的一个端到端用例示例。
假设我们要构建一个用于显示个人资料的界面。我们将使用私有后端和REST API获取给定个人资料的数据。
#### 概述

### 最佳做法
- **避免将应用的入口点（如Activity、Service、广播接收器）指定为数据源**
相反，您应只将其与其他组件协调，以检索与该入口点相关的数据子集。每个应用组件存在的时间都很短暂，具体取决于用户与其设备的交互情况以及系统当前的整体运行状况。
- **在应用的各个模块之间设定明确的职责界限**
例如，请勿在代码库中将从网络加载数据的代码散布到多个类或软件包中。同样，也不要将不相关的职责（如数据缓存和数据绑定）定义到同一个类中。
- **尽量少公开每个模块的代码**
请勿试图创建“就是那一个”快捷方式来呈现一个模块的内部实现细节。短期内，您可能会省了点时间，但随着代码库的不断发展，您可能会反复陷入技术上的麻烦。
- **考虑如何使各个模块可独立测试**
例如，如果使用明确定义的 API 从网络获取数据，将会更容易测试在本地数据库中保留该数据的模块。如果您将这两个模块的逻辑混放在一处，或将网络代码分散在整个代码库中，那么即便能够进行测试，难度也会大很多。
- **专注于应用的独特核心，以使其从其他应用中脱颖而出**
不要一次又一次地编写相同的样板代码，这是在做无用功。相反，您应将时间和精力集中放在能让应用与众不同的方面上，并让 Android 架构组件以及建议的其他库处理重复的样板。
- **保留尽可能多的相关数据和最新数据**
这样，即使用户的设备处于离线模式，他们也可以使用您应用的功能。请注意，并非所有用户都能享受到稳定的高速连接。
- **将一个数据源指定为单一可信来源**
每当应用需要访问这部分数据时，这部分数据都应一律源于此单一可信来源。
