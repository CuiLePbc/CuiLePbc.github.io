---
layout: post
title:  "Kotlin协程使用"
date:   2019-04-22 17:10:00 +0800
categories: Android,Kotlin,编程语言,并发
---

## Kotlin协程
### 异步程序设计
实现异步编程常用的方式有：线程、回调、Futures和Promises 等等、响应式扩展、协程。

- 线程：最常见的避免程序阻塞方法。但是线程切换不够廉价，启动数受操作系统限制较大，不是总是可用（比如javascropt不支持），不易使用。
- 回调：将一个函数作为参数传递给另一个函数，并在处理完后，调用此函数。但是，回调的错误处理、嵌套数量均不是很友好。
- Futures或Promises 等等：当发起调用时，承诺在某些时候它将返回一个名为Promises的可被操作的对象。例如：
```
fun postItem(item: Item) {
    preparePostAsync() 
        .thenCompose { token -> 
            submitPostAsync(token, item)
        }
        .thenAccept { post -> 
            processPost(post)
        }
         
}

fun preparePostAsync(): Promise<Token> {
    // 发起请求并当稍后的请求完成时返回一个 promise
    return promise 
}
```
但是，此异步方式属于链式调用组合模型，自上而下的命令式方法（如循环、异常处理等）均无效。此方式必须返回Promises对象，异常处理也比较复杂。

- 响应式扩展：
